type Account implements Node {
  uuid: ID!
  email: String
  password: String
  token: String
  userId: Int

  """The ID of the object."""
  id: ID!
}

type AccountConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AccountEdge]!
}

"""A Relay edge containing a `Account` and its cursor."""
type AccountEdge {
  """The item at the end of the edge"""
  node: Account

  """A cursor for use in pagination"""
  cursor: String!
}

type AuthPayload {
  token: String!
}

type Branch implements Node {
  uuid: ID!
  name: String
  divisionId: Int
  employees(before: String, after: String, first: Int, last: Int): UserConnection
  division: Division

  """The ID of the object."""
  id: ID!
}

input BranchAddInput {
  divisionId: ID!
  name: String!
}

type BranchAddPayload {
  branch: Branch
}

type BranchConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BranchEdge]!
}

"""A Relay edge containing a `Branch` and its cursor."""
type BranchEdge {
  """The item at the end of the edge"""
  node: Branch

  """A cursor for use in pagination"""
  cursor: String!
}

type Division implements Node {
  uuid: ID!
  name: String
  organisationId: Int
  branches(before: String, after: String, first: Int, last: Int): BranchConnection
  organisation: Organisation

  """The ID of the object."""
  id: ID!
}

input DivisionAddInput {
  organisationId: ID!
  name: String!
}

type DivisionAddPayload {
  division: Division
}

type DivisionConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DivisionEdge]!
}

"""A Relay edge containing a `Division` and its cursor."""
type DivisionEdge {
  """The item at the end of the edge"""
  node: Division

  """A cursor for use in pagination"""
  cursor: String!
}

input EmployeeAddInput {
  branchId: ID!
  name: String!
  role: String!
}

type EmployeeAddPayload {
  employee: User
}

input EmployeeEntryInput {
  name: String!
  role: String!
}

input EmployeesAddInput {
  branchId: ID!
  employees: [EmployeeEntryInput]
}

type EmployeesAddPayload {
  employees: [User]
}

type Mutation {
  organisationAdd(input: OrganisationAddInput!): OrganisationAddPayload
  divisionAdd(input: DivisionAddInput!): DivisionAddPayload
  branchAdd(input: BranchAddInput!): BranchAddPayload
  employeeAdd(input: EmployeeAddInput!): EmployeeAddPayload
  employeesAdd(input: EmployeesAddInput!): EmployeesAddPayload
  signup(input: UserSignupInput!): AuthPayload
  login(input: UserLoginInput!): AuthPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type Organisation implements Node {
  uuid: ID!
  name: String
  divisions(before: String, after: String, first: Int, last: Int): DivisionConnection

  """The ID of the object."""
  id: ID!
}

input OrganisationAddInput {
  name: String!
}

type OrganisationAddPayload {
  organisation: Organisation
}

type OrganisationConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrganisationEdge]!
}

"""A Relay edge containing a `Organisation` and its cursor."""
type OrganisationEdge {
  """The item at the end of the edge"""
  node: Organisation

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """The ID of the object"""
  node(id: ID!): Node
  allOrganizations(before: String, after: String, first: Int, last: Int): OrganisationConnection
  allDivisions(before: String, after: String, first: Int, last: Int): DivisionConnection
  allBranches(before: String, after: String, first: Int, last: Int): BranchConnection
  allUsers(before: String, after: String, first: Int, last: Int): UserConnection
  allAccounts(before: String, after: String, first: Int, last: Int): AccountConnection

  """The ID of the object"""
  branch(id: ID!): Branch

  """The ID of the object"""
  user(id: ID!): User
}

type User implements Node {
  uuid: ID!
  name: String
  role: String
  branchId: Int
  branch: Branch

  """The ID of the object."""
  id: ID!
}

type UserConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserEdge]!
}

"""A Relay edge containing a `User` and its cursor."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserSignupInput {
  email: String!
  password: String!
}

